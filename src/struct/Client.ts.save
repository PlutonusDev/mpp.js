import WebSocket from "ws";
import { EventEmitter } from "events";

interface ClientConfig {
	uri: string,
	secrets: {
		MPP_Token: string
	}
}

export default class MPPClient extends EventEmitter {
	private config: ClientConfig;
	private ws: WebSocket;

	constructor(config: ClientConfig) {
		super();

		this.config = config;
		this.ws = new WebSocket(this.config.uri, {
			origin: "https://www.multiplayerpiano.com"
		});

		this.ws.on("open", () => {
			this.emit("ready");
			this._sendPayload([{
				m: "hi",
				token: this.config.secrets.MPP_Token
			}]);

			setInterval(() => this._sendPayload([{
				m: "t",
				e: Date.now()
			}]), 20000);
		});

		this.ws.on("error", e => {
			this.emit("debug", `WebSocket Error! "${e.message}"`);
		});

		return this;
	}

	private _isConnected() {
		return this.ws.readyState === 1;
	}

	private _sendPayload(data: string | any[any]) {
		this.emit("debug", this._isConnected() ? `Payload sent with information ${typeof data == "string" ? `"${data}"` : JSON.stringify(data)}` : `Tried to send payload with information ${typeof data === "string" ? `"${data}"` : JSON.stringify(data)} without being connected.`);
		if(!this._isConnected()) return;
		if(typeof data === "string") return this.ws.send(data);
		this.ws.send(JSON.stringify(data));
	}

	setRoom(roomName: string = "lobby") {
		this._sendPayload([{
			m: "ch",
			_id: roomName,
			set: undefined
		}]);
	}

	setName(userName: string = "Anonymous") {
		this._sendPayload([{
			m: "",
			
		}]);
	}
}
